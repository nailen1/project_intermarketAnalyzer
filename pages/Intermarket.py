import streamlit as st
import pandas as pd
import numpy as np
import os
import IntermarketAnalyzer as ia
from IntermarketAnalyzer import Stock
from IntermarketAnalyzer import K200stock
from IntermarketAnalyzer import R3000stock
from IntermarketAnalyzer import Pair
from IntermarketAnalyzer import Market
from IntermarketAnalyzer import InterMarket
from IntermarketAnalyzer import Portfolio
import datetime
import plotly.graph_objects as go


st.set_page_config(
    page_title="Intermarket Analyzer | Intermarket",
    page_icon=":bar_chart:",
    # layout="wide",
    initial_sidebar_state="collapsed",
    menu_items={
    }
)

tuple_markets = ('KOSPI200', 'RUSSELL3000')
list_GICS_sector = ['Financials', 'Health Care', 'Industrials',
       'Consumer Discretionary', 'Information Technology', 'Real Estate',
       'Materials', 'Energy', 'Communication Services',
       'Consumer Staples', 'Utilities']
dict_mapping_info = {
                'ticker': 'Ticker',
                'NAME': 'Comapny name',
                'description_kor': 'Description',
                'business': 'Business',
                'GPT_comment': 'Comment generated by GPT',
                'GPT_update_info': 'Update info'
            }

market_target = None
market_source = None

def pairAnalysis(df_ref, marketName_target, marketName_source, key_menu):
    # [f"{i}: {df_ref.iloc[i]['target']} x {df_ref.iloc[i]['source']}" for i in range(len(df_ref))]
    selected_index = st.selectbox('Select an index of above DataFrame', range(len(df_ref)))
    st.subheader(f'Generated pair of index {selected_index}')
    
    info = df_ref.iloc[selected_index].to_dict()            
    st.code(f"pair[{selected_index}] = Pair(Stock('{info['target']}', '{marketName_target}'), Stock('{info['source']}', '{marketName_source}')")

    tab31, tab32 = st.tabs(['Plot', 'Information'])

    with tab31:
        p = ia.getPairFromTimelagAnalysis(df_ref, selected_index)
        lag = df_ref.iloc[0]['lag']
        st.write(f'<h5>Historical timelag correlation</h5>', unsafe_allow_html=True)      
        p.corrmatrix(lag=lag, min_period=10, max_period=100, max_shift=1000, stride=5)
        p.plot_heatmap_streamlit(lag=lag)
        st.divider()   
        st.write(f'<h5>Periodic timelag correlation</h5>', unsafe_allow_html=True)                    
        p.plot_periodicCorr_streamlit(lag=lag)
        st.divider()   
        st.write(f'<h5>Timelag correlation calendar</h5>', unsafe_allow_html=True)                    
        p.plot_nonZeros_stramlit(lag=lag)
        st.divider()   

    with tab32:
        info_pair = p.getInfo()

        st.subheader('GICS similarity score')
        st.write(info_pair['similarity'])

        col1, col2 = st.columns(2)
        with col1:
            for key, value in info_pair['info_gpt_target'].items():
                subtitle = dict_mapping_info[key] if key != 'ticker' else 'Target ticker'
                st.write(f'<h5>{subtitle}</h5>', unsafe_allow_html=True)
                if key == 'ticker':
                    st.code(f"'{value}'")
                elif key == 'business':
                    output = ' '.join([f"#{item} " for item in eval(value)]) if value != '[]' else 'GPT의 생성 정보가 없습니다!'
                    st.write(output)
                else:
                    st.write(value)           
        with col2:
            for key, value in info_pair['info_gpt_source'].items():
                subtitle = dict_mapping_info[key] if key != 'ticker' else 'Source ticker'
                st.write(f'<h5>{subtitle}</h5>', unsafe_allow_html=True)
                if key == 'ticker':
                    st.code(f"'{value}'")
                elif key == 'business':
                    output = ' '.join([f"#{item} " for item in eval(value)]) if value != '[]' else 'GPT의 생성 정보가 없습니다!'
                    st.write(output)
                else:
                    st.write(value)
        st.divider()

    with st.form(key=f'settning_{key_menu}'):
            date2 = st.date_input(' Set date', datetime.date(2023, 6, 1))
            period2 = st.slider(' Set period', 10, 300, 60)
            lag2_default = 0 if marketName_source == 'KOSPI200' else 1
            lag2 = st.number_input(' Set time lag',value=lag2_default, min_value=0, max_value=100, step=1)
            st.write('Selected','(', 'date =', date2, 'period = ', period2, 'lag = ', lag2, ')')
            submit2 = st.form_submit_button('APPLY')
    
    p2 = p.set_date(date2).set_period(period2).set_lag(lag2)
    p2.plot_compare_streamlit()
    p2.plot_returns_streamlit()

st.title('Intermarket Analyzer')
st.header('Intermarket timelag analysis (beta)')
st.write()

col1, col2 = st.columns(2)

with col1:
    st.subheader('Target market')
    selected_marketName_t = st.selectbox('Select target market.', (None,) + tuple_markets[:1], key='target1')
    if selected_marketName_t != None:
        market_target = Market(selected_marketName_t)
    
with col2:
    st.subheader('Source market')
    selected_marketName_s = st.selectbox('Select source market.', (None,) + tuple_markets, key='source1')
    if selected_marketName_s != None:
        market_source = Market(selected_marketName_s)

if market_target != None and market_source!= None:
    im = InterMarket(market_target, market_source)

    tab1, tab2, tab3 = st.tabs(['Intermarket', 'Target market', 'Source market'])
    with tab1:
        st.subheader(f'Generated Intermarket')
        st.code(f"intermarket = InterMarket(Market('{selected_marketName_t}'), Market('{selected_marketName_s}')")

        st.subheader(f'Set parameters')
        with st.expander(f'adjust parameters', expanded=False):
            with st.form(key='setiing'):
                historicity = st.slider(' Set historicity', 50, 1250, 1000, step=50)
                period_default = (10, 100) if selected_marketName_s=='KOSPI200' else (20, 100)
                period_range = st.slider(' Set period range', 10, 120, period_default, step=5)
                stride_default = 5 if selected_marketName_s=='KOSPI200' else 10
                stride = st.number_input(' Set stride',value=stride_default, min_value=1, max_value=10, step=1)
                lag_default = 0 if selected_marketName_s=='KOSPI200' else 1
                lag = st.number_input(' Set intermarket timelag',value=lag_default, min_value=0, max_value=4, step=0)
                st.write('Selected','(', 'historicity =', historicity, 'period range = ', period_range, 'stride', stride, 'intermarket timelag = ', lag, ')')
                submit = st.form_submit_button('APPLY')

        # intermarket = intermarket.set_historicity(historicity).set_period(period).set_lag(lag)

        st.code(f"intermarket.set_historicity('{historicity}').set_period({period_range})set_stride({stride}).set_lag({lag})")
        df_analysis_ref = pd.read_csv(f"./results-timelag-intermarket/result-timelag-analysis-{selected_marketName_t}-{selected_marketName_s}-lag{lag}-p{period_range[0]}_{period_range[1]}-d{historicity}-s{stride}.csv")
        # df_analysis_ref = df_analysis_ref[df_analysis_ref['total_score']>=30]
        df_analysis_ref = df_analysis_ref.head(20001)

        tab4, tab5, tab6 = st.tabs(['Total', 'Homogeneous', 'Heterogeneous'])
        with tab4:
            st.subheader(f'({selected_marketName_t} x {selected_marketName_s}) timelag analysis: total')
            with st.expander('setting', expanded=True):
                selected_sectors_target = st.multiselect('Select target GICS Sector ', list_GICS_sector, list_GICS_sector, key='total_t')
                selected_sectors_source = st.multiselect('Select source GICS Sector ', list_GICS_sector, list_GICS_sector, key='total_s')
            df_analysis_total = df_analysis_ref[df_analysis_ref['GICS_SECTOR_NAME_target'].isin(selected_sectors_target) & df_analysis_ref['GICS_SECTOR_NAME_source'].isin(selected_sectors_source)]
            # df_analysis_total = df_analysis_total.reset_index(drop=True)
            # df_analysis_total = df_analysis_total.rename(index=lambda x:x+1)
            # df_analysis_total = df_analysis_total.rename_axis("rank")
            # df_analysis_total = df_analysis_total.reset_index(drop=True)

            st.dataframe(df_analysis_total)

            pairAnalysis(df_analysis_total, selected_marketName_t, selected_marketName_s, 'menu_total')

        with tab5:
            st.subheader(f'({selected_marketName_t} x {selected_marketName_s}) timelag analysis: homogeneous')
            with st.expander('setting', expanded=True):
                selected_sectors = st.multiselect('Select GICS Sector ', list_GICS_sector, list_GICS_sector, key='homo')
            
            df_analysis_homo = df_analysis_ref[df_analysis_ref['GICS_SECTOR_NAME_target'] == df_analysis_ref['GICS_SECTOR_NAME_source']]
            df_analysis_homo = df_analysis_homo[df_analysis_homo['GICS_SECTOR_NAME_target'].isin(selected_sectors)]
            # df_analysis_homo = df_analysis_homo.reset_index()
            # df_analysis_homo = df_analysis_homo.rename(index=lambda x:x+1)
            # df_analysis_homo = df_analysis_homo.rename_axis("rank")
            df_analysis_homo = df_analysis_homo.reset_index(drop=True)

            st.dataframe(df_analysis_homo)

            pairAnalysis(df_analysis_homo, selected_marketName_t, selected_marketName_s, 'menu_homo')

        with tab6:
            st.subheader(f'({selected_marketName_t} x {selected_marketName_s}) timelag analysis: heterogeneous')
            df_analysis_hetero = df_analysis_ref[df_analysis_ref['GICS_SECTOR_NAME_target'] != df_analysis_ref['GICS_SECTOR_NAME_source']]
            # df_analysis_hetero = df_analysis_hetero.reset_index()
            # df_analysis_hetero = df_analysis_hetero.rename(index=lambda x:x+1)
            # df_analysis_hetero = df_analysis_hetero.rename_axis("rank")
            df_analysis_hetero = df_analysis_hetero.reset_index(drop=True)

            st.dataframe(df_analysis_hetero)

            pairAnalysis(df_analysis_hetero, selected_marketName_t, selected_marketName_s, 'menu_hetero')

