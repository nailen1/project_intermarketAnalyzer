import streamlit as st
import pandas as pd
import numpy as np
import IntermarketAnalyzer as ia
from IntermarketAnalyzer import Stock
from IntermarketAnalyzer import K200stock
from IntermarketAnalyzer import R3000stock
from IntermarketAnalyzer import Pair
from IntermarketAnalyzer import Market
from IntermarketAnalyzer import InterMarket
from IntermarketAnalyzer import Portfolio
import datetime
import plotly.graph_objects as go

st.set_page_config(
    page_title="Intermarket Analyzer | Portfolio",
    page_icon=":bar_chart:",
    initial_sidebar_state="collapsed",
    menu_items={
    }
)

t = None
s = None
comparable = None
tuple_markets = ('KOSPI200', 'RUSSELL3000')
dict_mapping_info = {
                'ticker': 'ticker',
                'NAME': 'Comapny name',
                'description_kor': 'Description',
                'business': 'Business',
                'GPT_comment': 'Comment generated by GPT',
                'GPT_update_info': 'Update info'
            }

st.title('Intermarket Analyzer')
st.header('Portfolio analysis')

stocks = None
st.subheader(f'Compose portfolio')
with st.expander(f'Set stocks and weights', expanded=True):
    with st.form(key='set stocks'):
        k200 = Market('KOSPI200')
        k200stocks = st.multiselect('KOSPI200 stocks', k200.tickers, ['005930 KS', '000660 KS'])
        r3000 = Market('RUSSELL3000')
        r3000stocks = st.multiselect('RUSSELL3000 stocks', r3000.tickers, ['MU UW', 'INTC UW'])
        submit = st.form_submit_button('APPLY')

    stocks = k200stocks + r3000stocks 
    
    if stocks != None:
        st.code(f'stocks={stocks}')

    with st.form(key= 'set weights'):
        weights = []
        for stock in stocks:
            w = st.number_input(f'{stock}: set weight', value=round(1/len(stocks), 4), min_value=0.0, max_value=1.0, step=0.01)
            weights.append(w)
        sum_of_weights = round(np.sum(weights), 3)
        weights_text = [round(x, 2) for x in weights]
        if np.sum(weights) !=1 and sum_of_weights == 1:
            weights[-1] = 1-np.sum(weights[:-1])
        st.write('sum of weights =', sum_of_weights)
        submit = st.form_submit_button('APPLY')

    if sum_of_weights != 1:
        st.info('sum of all weights must be 1.')
    else:
        st.code(f'weights={weights_text}')
                
if stocks != None and sum_of_weights == 1:
    df_portfolio = pd.DataFrame(data=[stocks, weights_text], columns=[f'Stock {i}' for i in range(len(stocks))], index=['ticker', 'weight'])
    st.dataframe(df_portfolio, use_container_width=True)

    st.subheader(f'Generated Portfolio')
    st.code(f"my_portfolio = Portfolio({stocks}, {weights_text})")
    my_portfolio = Portfolio(tickers=stocks, weights=weights)

if stocks != None and sum_of_weights == 1:
    st.subheader('Comparable stock')
    with st.expander('Set comparable stock'):
        selected_marketName = st.selectbox('Select a market', (None,) + tuple_markets, key='stock1')
        if selected_marketName != None:
            selected_market = Market(selected_marketName)
            tickers = tuple(selected_market.tickers)
            selected_ticker = st.selectbox('Select a stock', tickers, index=44, key='stock2')
            if selected_market != None and selected_ticker != None:
                comparable = Stock(selected_ticker, selected_marketName)
                tORs = st.selectbox('Set comparable as a ...', ('target', 'source'), index=1, key='stock3')
                args_pair = ['my_portfolio', f"Stock('{comparable.ticker}' ,'{comparable.marketName}')"]
        else:
            st.selectbox('Select market first.', (''), key='stock4')

    if my_portfolio != None and sum_of_weights == 1 and comparable != None:
        if tORs == 'source':
            t = my_portfolio
            s = comparable
        else:
            t = comparable
            s = my_portfolio
        p = Pair(t, s)

        tab1, tab2, tab3 = st.tabs(['pair', 'portfolio', 'comparable'])
        with tab1:
            st.subheader(f'Generated Pair')
            if tORs == 'source':
                st.code(f"pair = Pair({args_pair[0]}, {args_pair[1]})")
            else:
                st.code(f"pair = Pair({args_pair[1]}, {args_pair[0]})")

            st.subheader(f'Set parameters')
            with st.expander(f'adjust parameters', expanded=True):
                with st.form(key='setiing'):
                    date = st.date_input(' Set date', datetime.date(2023, 6, 1))
                    period = st.slider(' Set period', 5, 300, 75)
                    lag = st.number_input(' Set time lag',value=0, min_value=0, max_value=1000, step=1)
                    st.write('Selected','(', 'date =', date, 'period = ', period, 'lag = ', lag, ')')
                    submit = st.form_submit_button('APPLY')

            p = p.set_date(date).set_period(period).set_lag(lag)

            st.code(f"pair.set_date('{date}').set_period({period}).set_lag({lag})")

            st.subheader('Result')
            max_period = 100
            max_shift = 1000
            stride = 5

            title_info=f'lagged {lag} source({s.ticker}) -> target({t.ticker})'
            st.write(f'<h4>Historical timelag correlation</h4>', unsafe_allow_html=True)      
            st.write(title_info)
            with st.expander(f'adjust resolution' , expanded=False):
                with st.form(key='setiing_corrmatrix'):
                        max_period = st.number_input('Set max period', value=100, min_value=50, max_value=200)
                        max_shift = st.number_input('Set past days', value=1000, min_value=20, max_value=1250)
                        stride = st.number_input('Set past days', value=5, min_value=1, max_value=10)
                        # st.write('selected:', max_period, max_shift, stride)
                        m = max_period // stride
                        n = max_shift
                        resolution = f'{m} x {n}'
                        st.write('Selected','(', 'max period =', max_period, 'past days = ', max_shift, 'stride = ', stride, ')')
                        submit_corrmatrix = st.form_submit_button('APPLY')
            st.code(f'resolution = {m} x {n}')
            corr_matrix = p.corrmatrix(lag=lag, max_period=max_period, max_shift=max_shift, stride=stride, plot=False, save=False)
                
            tab_h1, tab_h2 = st.tabs(['heatmap', 'correlation matrix'])                          
            with tab_h1:
                p.plot_heatmap_streamlit(lag=lag)
            with tab_h2:
                st.dataframe(p.corr_matrix)
            
            st.divider()

            st.write(f'<h4>Periodic timelag correlation</h4>', unsafe_allow_html=True)                    
            st.write(title_info)
            p.plot_periodicCorr_streamlit(lag=lag)
            st.divider()

            st.write(f'<h4>Timelag correlation calendar</h4>', unsafe_allow_html=True)                    
            st.write(title_info)
            p.plot_nonZeros_stramlit(lag=lag)
            st.divider()   
                    
            st.subheader('Details')
            selected_option = st.selectbox(
                'Select an operation', 
                (
                    'Timelag analysis: statistics and score', 
                    'Price plot: target vs. source', 
                    '[On parameter analysis] Compare plot',
                    '[On parameter analysis] Timelag calculation results'))

            if selected_option == 'Timelag analysis: statistics and score':
                container = st.container()
                with container:
                    st.code(f'timelag analysis: on lag {lag}, past {max_shift} days')
                    st.write(f'<h4>Statistics</h4>', unsafe_allow_html=True)      
                    df_corr_stat = p.getCorrStat()
                    st.dataframe(df_corr_stat.T, use_container_width=True)
                    corr_stat2 = p.getCorrStat2()
                    df_corr_stat2 = pd.DataFrame([corr_stat2])
                    st.dataframe(df_corr_stat2, use_container_width=True, hide_index=True)
                    st.write(f'<h4>Score (out of 100)</h4>', unsafe_allow_html=True)      
                    score = p.getTimelagScore(option='deploy')
                    st.write('Timelag quality:', score['quality'])
                    st.write('Timelag strength:', score['strength'])
                    st.write('Timelag volatility:', score['volatility'])
                    st.write('Timelag prevalence:', score['prevalence'])
                    st.write('**Timelag score:**', score['total_score'])

            if selected_option == 'Price plot: target vs. source':
                p.plot_price_streamlit()

            if selected_option == '[On parameter analysis] Compare plot':
                with st.form(key='setiing2'):
                        date2 = st.date_input(' Set date', datetime.date(2023, 6, 1))
                        period2 = st.slider(' Set period', 5, 300, 75)
                        lag2 = st.number_input(' Set time lag',value=1, min_value=0, max_value=1000, step=1)
                        st.write('Selected','(', 'date =', date2, 'period = ', period2, 'lag = ', lag2, ')')
                        submit2 = st.form_submit_button('APPLY')
                
                p2 = p.set_date(date2).set_period(period2).set_lag(lag2)
                p2.plot_compare_streamlit()
                p2.plot_returns_streamlit()

            if selected_option == '[On parameter analysis] Timelag calculation results':
                st.subheader('Optimal timelag solution')
                p.plot_compare_streamlit(best=True)
                st.divider()

                st.write(p.solution())
                st.divider()

                st.subheader('Statistical plot on timelag results')
                p.plot_stat_streamlit()
                st.divider()

                st.subheader('Full timelag results')
                df_result = p.df_result
                df_result = df_result.sort_values('corr', ascending=False)
                df_result.reset_index(inplace=True)
                st.dataframe(df_result)
                st.divider()

        with tab2:
            selected_operation = st.selectbox('Select menu', ('Constituents', 'DataFrame',), key='t')
            if selected_operation == 'Constituents':
                # st.subheader('Constituents')
                bucket_info = []
                for stock in stocks:
                    if ' KS' in stock:
                        marketName = 'KOSPI200'
                    elif ' U' in stock:
                        marketName = 'RUSSELL3000'
                    info = Stock(stock, marketName).getInfo()
                    bucket_info.append(info)

                df_info = pd.DataFrame(bucket_info)
                df_info = df_info.drop(df_info.columns[2], axis=1)
                st.dataframe(df_info)

            if selected_operation == 'DataFrame':
                st.dataframe(my_portfolio.df, use_container_width=True)
    
        with tab3:
            selected_operation = st.selectbox('Select menu', ('DataFrame', 'Information: Bloomberg', 'Information: GPT'), key='s')
            if selected_operation == 'DataFrame':
                st.dataframe(comparable.df, use_container_width=True)
            elif selected_operation == 'Information: Bloomberg':
                for key, value in comparable.getInfo().items():
                    st.subheader(dict_mapping_info[key])
                    st.write(value)
            elif selected_operation == 'Information: GPT':
                for key, value in comparable.getGPTInfo().items():
                    st.write(f'<h5>{dict_mapping_info[key]}</h5>', unsafe_allow_html=True)                    
                    st.write(value)
                st.divider()
                if st.button('Generate the latest GPT-4 information (paid, 30sec)',key='gpt-s'):
                    ans = comparable.generateGPTanswer(model='gpt-4')
                    st.write(ans)

