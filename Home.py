import streamlit as st
import pandas as pd
import numpy as np
import IntermarketAnalyzer as ia
from IntermarketAnalyzer import Stock
from IntermarketAnalyzer import K200stock
from IntermarketAnalyzer import R3000stock
from IntermarketAnalyzer import Pair
from IntermarketAnalyzer import Market
from IntermarketAnalyzer import InterMarket
from IntermarketAnalyzer import Portfolio
import datetime
import plotly.graph_objects as go


st.set_page_config(
    page_title="Intermarket Analyzer | Home",
    page_icon=":bar_chart:",
    # layout="wide",
    initial_sidebar_state="collapsed",
    menu_items={
    }
)

t = None
s = None
info_t = None
gptinfo_t = None

tuple_markets = ('KOSPI200', 'RUSSELL3000')

# k200 = Market('KOSPI200')
# r3000 = Market('RUSSELL3000')
# dict_mapping_market = {
#     'KOSPI200': k200,
#     'RUSSELL3000': r3000
# }

dict_mapping_info = {
                'ticker': 'Ticker',
                'NAME': 'Comapny name',
                'description_kor': 'Description',
                'business': 'Business',
                'GPT_comment': 'Comment generated by GPT',
                'GPT_update_info': 'Update info'
            }

st.title('Intermarket Analyzer')
st.header('Pair analysis')

st.write()

col1, col2 = st.columns(2)

with col1:
    st.subheader('Target stock')
    selected_marketName_t = st.selectbox('Select target market', (None,) + tuple_markets, key='target1')
    if selected_marketName_t != None:
        # selected_market_t = dict_mapping_market[selected_marketName_t]
        selected_market_t = Market(selected_marketName_t)
        tickers_t = tuple(selected_market_t.tickers)
        selected_ticker_t = st.selectbox('Select target stock', tickers_t, index=7, key='target2')
        if selected_market_t != None and selected_ticker_t != None:
            t = Stock(selected_ticker_t, selected_marketName_t)
    else:
        st.selectbox('Select market first.', (''), key='target3')
    
with col2:
    st.subheader('Source stock')
    selected_marketName_s = st.selectbox('Select source market', (None,) + tuple_markets, key='source1')
    if selected_marketName_s != None:
        # selected_market_s = dict_mapping_market[selected_marketName_s]
        selected_market_s = Market(selected_marketName_s)
        tickers_s = tuple(selected_market_s.tickers)
        selected_ticker_s = st.selectbox('Select source stock', tickers_s, key='source2')
        if selected_market_s != None and selected_ticker_s != None:
            s = Stock(selected_ticker_s, selected_marketName_s)
    else:
        st.selectbox('Select market first.', (''), key='source3')

if t != None and s!= None:
    p = Pair(t,s)

    tab1, tab2, tab3 = st.tabs(['Pair', 'Target', 'Source'])
    with tab1:
        st.subheader(f'Generated Pair')
        st.code(f"pair = Pair(Stock('{t.ticker}', '{t.marketName}'), Stock('{s.ticker}', '{s.marketName}')")

        st.subheader(f'Set parameters')
        with st.expander(f'adjust parameters', expanded=True):
            with st.form(key='setiing'):
                date = st.date_input(' Set date', datetime.date(2023, 6, 1))
                period = st.slider(' Set period', 5, 300, 75)
                lag = st.number_input(' Set time lag',value=1, min_value=0, max_value=1000, step=1)
                st.write('Selected','(', 'date =', date, 'period = ', period, 'lag = ', lag, ')')
                submit = st.form_submit_button('APPLY')

        p = p.set_date(date).set_period(period).set_lag(lag)

        st.code(f"pair.set_date('{date}').set_period({period}).set_lag({lag})")

        st.subheader('Result')
        max_period = 100
        max_shift = 1000
        stride = 5

        title_info=f'lagged {lag} source({s.ticker}) -> target({t.ticker})'
        st.write(f'<h4>Historical timelag correlation</h4>', unsafe_allow_html=True)      
        st.write(title_info)
        with st.expander(f'adjust resolution' , expanded=False):
            with st.form(key='setiing_corrmatrix'):
                    max_period = st.number_input('Set max period', value=100, min_value=50, max_value=200)
                    max_shift = st.number_input('Set past days', value=1000, min_value=20, max_value=1250)
                    stride = st.number_input('Set stride days', value=5, min_value=1, max_value=10)
                    # st.write('selected:', max_period, max_shift, stride)
                    m = max_period // stride
                    n = max_shift
                    resolution = f'{m} x {n}'
                    st.write('Selected','(', 'max period =', max_period, 'past days = ', max_shift, 'stride = ', stride, ')')
                    submit_corrmatrix = st.form_submit_button('APPLY')
        st.code(f'resolution = {m} x {n}')
        corr_matrix = p.corrmatrix(lag=lag, max_period=max_period, max_shift=max_shift, stride=stride, plot=False, save=False)
            
        tab_h1, tab_h2 = st.tabs(['heatmap', 'correlation matrix'])                          
        with tab_h1:
            p.plot_heatmap_streamlit(lag=lag)
        with tab_h2:
            st.dataframe(p.corr_matrix)
        
        st.divider()

        st.write(f'<h4>Periodic timelag correlation</h4>', unsafe_allow_html=True)                    
        st.write(title_info)
        p.plot_periodicCorr_streamlit(lag=lag)
        st.divider()

        st.write(f'<h4>Timelag correlation calendar</h4>', unsafe_allow_html=True)                    
        st.write(title_info)
        p.plot_nonZeros_stramlit(lag=lag)
        st.divider()   
        
        st.subheader('Details')
        selected_option = st.selectbox(
            'Select menu', 
            (
                'Timelag analysis: statistics and score', 
                'Pair information: GPT', 
                'Price plot: target vs. source', 
                '[On parameter analysis] Compare plot',
                '[On parameter analysis] Timelag calculation results'))

        if selected_option == 'Timelag analysis: statistics and score':
            container = st.container()
            with container:
                st.code(f'timelag analysis: on lag {lag}, past {max_shift} days')
                st.write(f'<h4>Statistics</h4>', unsafe_allow_html=True)      
                df_corr_stat = p.getCorrStat()
                st.dataframe(df_corr_stat.T, use_container_width=True)
                corr_stat2 = p.getCorrStat2()
                df_corr_stat2 = pd.DataFrame([corr_stat2])
                st.dataframe(df_corr_stat2, use_container_width=True, hide_index=True)
                st.write(f'<h4>Score (out of 100)</h4>', unsafe_allow_html=True)      
                score = p.getTimelagScore(option='deploy')
                st.write('Timelag quality:', score['quality'])
                st.write('Timelag strength:', score['strength'])
                st.write('Timelag volatility:', score['volatility'])
                st.write('Timelag prevalence:', score['prevalence'])
                st.write('**Timelag score:**', score['total_score'])
                
        if selected_option == 'Pair information: GPT':
            info = p.getInfo()
            st.subheader('GICS similarity score')
            st.write(info['similarity'])
            # st.write(f"<h1>{info['similarity']}</h1>", unsafe_allow_html=True)

            st.subheader('Summary: target vs. source')
            
            col1, col2 = st.columns(2)
            with col1:
                for key, value in info['info_gpt_target'].items():
                    subtitle = dict_mapping_info[key] if key != 'ticker' else 'Target ticker'
                    st.write(f'<h5>{subtitle}</h5>', unsafe_allow_html=True)
                    if key == 'ticker':
                        st.code(f"'{value}'")
                    elif key == 'business':
                        output = ' '.join([f"#{item} " for item in eval(value)]) if value != '[]' else 'GPT의 생성 정보가 없습니다!'
                        st.write(output)
                    else:
                        st.write(value)
                        
            with col2:
                for key, value in info['info_gpt_source'].items():
                    subtitle = dict_mapping_info[key] if key != 'ticker' else 'Source ticker'
                    st.write(f'<h5>{subtitle}</h5>', unsafe_allow_html=True)
                    if key == 'ticker':
                        st.code(f"'{value}'")
                    elif key == 'business':
                        output = ' '.join([f"#{item} " for item in eval(value)]) if value != '[]' else 'GPT의 생성 정보가 없습니다!'
                        st.write(output)
                    else:
                        st.write(value)

        if selected_option == 'Price plot: target vs. source':
            p.plot_price_streamlit()

        if selected_option == '[On parameter analysis] Compare plot':
            with st.form(key='setting'):
                    date2 = st.date_input(' Set date', datetime.date(2023, 6, 1))
                    period2 = st.slider(' Set period', 5, 300, 60)
                    lag2_default = 0 if selected_marketName_s == 'KOSPI200' else 1
                    lag2 = st.number_input(' Set time lag',value=lag2_default, min_value=0, max_value=100, step=1)
                    st.write('Selected','(', 'date =', date2, 'period = ', period2, 'lag = ', lag2, ')')
                    submit2 = st.form_submit_button('APPLY')
            
            p2 = p.set_date(date2).set_period(period2).set_lag(lag2)
            p2.plot_compare_streamlit()
            p2.plot_returns_streamlit()

        if selected_option == '[On parameter analysis] Timelag calculation results':
            st.subheader('Optimal timelag solution')
            p.plot_compare_streamlit(best=True)
            st.divider()

            st.write(p.solution())
            st.divider()

            st.subheader('Statistical plot on timelag results')
            p.plot_stat_streamlit()
            st.divider()

            st.subheader('Full timelag results')
            df_result = p.df_result
            df_result = df_result.sort_values('corr', ascending=False)
            df_result.reset_index(inplace=True)
            st.dataframe(df_result)
            st.divider()

    with tab2:
        selected_operation = st.selectbox('Select menu', ('Candlestick chart and DataFrame', 'Information: Bloomberg', 'Information: GPT'), key='t')
        if selected_operation == 'Candlestick chart and DataFrame':
            t.plot_candle_streamlit()
            st.dataframe(t.df, use_container_width=True)
        elif selected_operation == 'Information: Bloomberg':
            for key, value in t.getInfo().items():
                st.subheader(key)
                st.write(value)
        elif selected_operation == 'Information: GPT':
            for key, value in t.getGPTInfo().items():
                subtitle = dict_mapping_info[key]
                st.write(f'<h5>{subtitle}</h5>', unsafe_allow_html=True)
                if key == 'ticker':
                    st.code(f"'{value}'")
                elif key == 'business':
                    output = ' '.join([f"#{item} " for item in eval(value)]) if value != '[]' else 'GPT의 생성 정보가 없습니다!'
                    st.write(output)
                else:
                    st.write(value)

            st.divider()
            if st.button('Generate the latest GPT-4 information (paid, 30sec)', key='gpt-t'):
                with st.spinner('Generating ...'):
                    ans_t = t.generateGPTanswer(model='gpt-4')
                    st.write(ans_t)
                st.success('Generation complete')
            st.divider()
            
 
    with tab3:
        selected_operation = st.selectbox('Select menu', ('Candlestick chart and DataFrame', 'Information: Bloomberg', 'Information: GPT'), key='s')
        if selected_operation == 'Candlestick chart and DataFrame':
            s.plot_candle_streamlit()
            st.dataframe(s.df, use_container_width=True)
        elif selected_operation == 'Information: Bloomberg':
            for key, value in s.getInfo().items():
                st.subheader(key)
                st.write(value)
        elif selected_operation == 'Information: GPT':
            for key, value in s.getGPTInfo().items():
                subtitle = dict_mapping_info[key]
                st.write(f'<h5>{subtitle}</h5>', unsafe_allow_html=True)
                if key == 'ticker':
                    st.code(f"'{value}'")
                elif key == 'business':
                    output = ' '.join([f"#{item} " for item in eval(value)]) if value != '[]' else 'GPT의 생성 정보가 없습니다!'
                    st.write(output)
                else:
                    st.write(value)

            st.divider()
            if st.button('Generate the latest GPT-4 information (paid, 30sec)',key='gpt-s'):
                with st.spinner('Generating ...'):
                    ans_s = s.generateGPTanswer(model='gpt-4')
                    st.write(ans_s)
                st.success('Generation complete')

# if isinstance(t, Stock):
#     st.dataframe(t.df, use_container_width=True)


